/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.firebase.views;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.Icon;
import javax.swing.ImageIcon;

import javax.swing.JLabel;

import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

import com.google.api.core.ApiFuture;

import com.google.cloud.firestore.DocumentReference;
import com.google.cloud.firestore.DocumentSnapshot;
import com.google.firebase.cloud.FirestoreClient;
import com.mycompany.firebase.CRUD.downloaderImg;
import com.mycompany.firebase.conection.conexion;

/**
 *
 * @author ALEX
 */
public class listProducts extends javax.swing.JFrame {
    static final String bucketName = "fir-java-dbb1c.appspot.com";
    static Map<String,byte[]> imagenes=new HashMap<>();

    /**
     * Creates new form listProducts
     */
    public listProducts() {
        conexion.Conectar();
        initComponents();
        llenarTabla("products");
        this.setLocationRelativeTo(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblProducts = new javax.swing.JTable();
        lblImagen = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblProducts.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][] {
                        { null, null, null, null },
                        { null, null, null, null },
                        { null, null, null, null },
                        { null, null, null, null }
                },
                new String[] {
                        "Title 1", "Title 2", "Title 3", "Title 4"
                }));
        tblProducts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblProductsMouseClicked(evt);
            }
        });
        // Agregar el ListSelectionListener a la tabla
        tblProducts.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent evt) {
                tblProductsValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(tblProducts);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1168, Short.MAX_VALUE)
                                .addContainerGap())
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 243,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41)));
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap(24, Short.MAX_VALUE)
                                .addComponent(lblImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 205,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 386,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap()));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblProductsMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_tblProductsMouseClicked

        mostrarImgInLabel(tblProducts.getSelectedRow(), lblImagen);
    }// GEN-LAST:event_tblProductsMouseClicked

    private void tblProductsValueChanged(ListSelectionEvent evt) {
        // Verificar si el evento es de ajuste (cuando se suelta el clic despu√©s de
        // mover la fila)
        if (!evt.getValueIsAdjusting()) {
            // Obtener la fila seleccionada
            int selectedRow = tblProducts.getSelectedRow();
            mostrarImgInLabel(selectedRow, lblImagen);
        } //
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(listProducts.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(listProducts.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(listProducts.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(listProducts.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new listProducts().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblImagen;
    private javax.swing.JTable tblProducts;
    // End of variables declaration//GEN-END:variables

    /**
     * 
     * @param NameCollection nombre de la coleccion
     * @return trae una lista con los nombres de los documentos que contiene
     *         <a >{@code NameCollection}</a>
     */
    private List<String> getAllDocuments(String NameCollection) {
        List<String> listaDocumentos = new ArrayList<>();
        Iterable<DocumentReference> documentos = FirestoreClient.getFirestore().collection(NameCollection)
                .listDocuments();
        for (DocumentReference reference : documentos) {
            listaDocumentos.add(reference.getId());
        }
        return listaDocumentos;
    }

    private List<Object> DownloadDataByCollection(String Collection, String Document) {
        List<Object> listaTemp = new ArrayList<>();
        Map<String, Object> data = null;
        try {

            DocumentReference reference = FirestoreClient.getFirestore().collection(Collection).document(Document);
            ApiFuture<DocumentSnapshot> future = reference.get();
            DocumentSnapshot document = future.get();
            if (document.exists()) {
                data = document.getData();

            } else {
                System.out.println("el documento no existe");
            }

            String cb = data.get("cb").toString();
            String img = data.get("img").toString();
            double precio = Double.parseDouble(data.get("precio").toString());
            String stock = data.get("stock").toString();
            listaTemp.add(document.getId());
            listaTemp.add(precio);
            listaTemp.add(stock);
            listaTemp.add(img);
            llenarMapImgs(img);
            System.out.println("Datos descargados exitosamente");
        } catch (Exception e) {
            System.out.println("ERROR: " + e.getMessage());
        }

        return listaTemp;

    }

    private void llenarTabla(String NameCollection) {
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Nombre");
        model.addColumn("precio");
        model.addColumn("stock");
        model.addColumn("imagen");
        for (String documento : getAllDocuments(NameCollection)) {
            Object[] arrayObjeto = DownloadDataByCollection(NameCollection, documento).toArray();
            model.addRow(arrayObjeto);

        }

        tblProducts.setModel(model);
        // Modificar el ancho de la primera columna despu√©s de haber sido agregada al
        // contenedor
        TableColumn column = tblProducts.getColumnModel().getColumn(3);
        column.setMinWidth(0);
        column.setMaxWidth(0);
        column.setResizable(false);
        column.setPreferredWidth(0);

    }

    private void mostrarImgInLabel(int fila, JLabel label) {
        String nameImg=tblProducts.getValueAt(fila, 3).toString();
        byte[] imgBytes = imagenes.get(nameImg);
        /*try {
            imgBytes = downloaderImg.downloadImageBytes(bucketName, tblProducts.getValueAt(fila, 3).toString());
        } catch (Exception e) {
            System.out.println("ERROR: en listProducts.mostrarImgInLabel");
        }*/

        lblImagen.setIcon(CrearImg(new ImageIcon(imgBytes), lblImagen));
    }

    /**
     * 
     * @param url        ruta de la imagen o la imagen
     * @param contenedor Jlabel que va a contener la imagen
     * @return returna la imagen ajustada al tama√±o del Jlabel
     */
    private Icon CrearImg(ImageIcon img, JLabel contenedor) {

        Icon icono = new ImageIcon(
                img.getImage().getScaledInstance(contenedor.getWidth(), contenedor.getHeight(), contenedor.getWidth()));
        return icono;

    }

    private void llenarMapImgs(String nombreImg){
        try {
            imagenes.put(nombreImg, downloaderImg.downloadImageBytes(bucketName, nombreImg));
        } catch (Exception e) {
            System.out.println("ERROR en llenarMapImgs: "+e.getMessage());
        }
            
    }
}
